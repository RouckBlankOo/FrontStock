{/*import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  SafeAreaView,
  Platform,
} from "react-native";
import Svg, { G, Circle } from "react-native-svg";
import { useNavigation } from "@react-navigation/native";
import Ionicons from "@expo/vector-icons/Ionicons";
import { LinearGradient } from "expo-linear-gradient";
import { theme } from "../constants/theme";

const { width: SCREEN_WIDTH } = Dimensions.get("window");
const CHART_SIZE = Math.min(SCREEN_WIDTH * 0.7, 230);
const RADIUS = CHART_SIZE / 2 - 16;
const STROKE_WIDTH = 28;
const CENTER = RADIUS + STROKE_WIDTH / 2;
const CIRCUMFERENCE = 2 * Math.PI * RADIUS;

// Replace with your backend URL if needed
const API_BASE = "http://192.168.1.13523:5000";

const AnalyticsScreen = () => {
  const navigation = useNavigation();
  const [donutData, setDonutData] = useState<
    Array<{
      title: string;
      detailsTitle: string;
      data: Array<{ value: number; label: string; color: string }>;
    }>
  >([
    {
      title: "Analyse du Stock",
      detailsTitle: "Détails du stock",
      data: [],
    },
    {
      title: "Analyse Financière",
      detailsTitle: "Détails des finances",
      data: [],
    },
  ]);
  const [donutIndex, setDonutIndex] = useState(0);

  // Fetch data from backend
  useEffect(() => {
    fetch(`${API_BASE}/stock`)
      .then((res) => res.json())
      .then((stock) => {
        setDonutData((prev) => [{ ...prev[0], ...stock }, prev[1]]);
      });
    fetch(`${API_BASE}/finance`)
      .then((res) => res.json())
      .then((finance) => {
        setDonutData((prev) => [prev[0], { ...prev[1], ...finance }]);
      });
  }, []);

  const handleRefresh = (idx) => {
    if (idx === 0) {
      fetch(`${API_BASE}/stock`)
        .then((res) => res.json())
        .then((stock) => {
          setDonutData((prev) => [{ ...prev[0], ...stock }, prev[1]]);
        });
    }
    if (idx === 1) {
      fetch(`${API_BASE}/finance`)
        .then((res) => res.json())
        .then((finance) => {
          setDonutData((prev) => [prev[0], { ...prev[1], ...finance }]);
        });
    }
  };

  return (
    <LinearGradient
      colors={["#f7f9fa", "#e3e8ee", "#f7f9fa"]}
      style={styles.gradientBg}
    >
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.container}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
            activeOpacity={0.7}
          >
            <Ionicons
              name="arrow-back"
              size={24}
              color={theme.colors.primary}
            />
          </TouchableOpacity>
          <ScrollView
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onScroll={(e) => {
              const idx = Math.round(
                e.nativeEvent.contentOffset.x / SCREEN_WIDTH
              );
              setDonutIndex(idx);
            }}
            scrollEventThrottle={16}
            style={{ flex: 1 }}
            contentContainerStyle={{ alignItems: "flex-start" }}
          >
            {donutData.map((donut, idx) => {
              const total = donut.data.reduce(
                (sum, item) => sum + item.value,
                0
              );
              let prevPercent = 0;
              return (
                <ScrollView
                  key={donut.title}
                  style={{ width: SCREEN_WIDTH }}
                  contentContainerStyle={{
                    alignItems: "center",
                    justifyContent: "center",
                    flexGrow: 1,
                    paddingHorizontal: 6,
                    paddingBottom: 16,
                  }}
                  showsVerticalScrollIndicator={false}
                >
                  <Text style={styles.title}>{donut.title}</Text>
                  <TouchableOpacity
                    style={styles.refreshButton}
                    onPress={() => handleRefresh(idx)}
                    activeOpacity={0.6}
                  >
                    <Ionicons
                      name="refresh"
                      size={18}
                      color={theme.colors.primary}
                    />
                    <Text style={styles.refreshText}>Rafraîchir</Text>
                  </TouchableOpacity>
                  <View style={styles.chartWrapper}>
                    <LinearGradient
                      colors={["#fff", "#f0f4fa"]}
                      style={styles.chartContainer}
                    >
                      <Svg width={CHART_SIZE} height={CHART_SIZE}>
                        <G rotation="-90" origin={`${CENTER}, ${CENTER}`}>
                          {donut.data.map((item, i) => {
                            const percent = item.value / total;
                            const gap = 6;
                            const arcLength = percent * CIRCUMFERENCE - gap;
                            const strokeDasharray = [
                              arcLength > 0 ? arcLength : 0,
                              CIRCUMFERENCE - (arcLength > 0 ? arcLength : 0),
                            ];
                            const circle = (
                              <Circle
                                key={item.label}
                                cx={CENTER}
                                cy={CENTER}
                                r={RADIUS}
                                stroke={item.color}
                                strokeWidth={STROKE_WIDTH}
                                fill="none"
                                strokeDasharray={strokeDasharray}
                                strokeDashoffset={
                                  CIRCUMFERENCE * (1 - prevPercent) + gap / 2
                                }
                                opacity={0.92}
                              />
                            );
                            prevPercent += percent;
                            return circle;
                          })}
                        </G>
                      </Svg>
                      <View style={styles.centerTextContainer}>
                        <Text style={styles.centerText}>{total}</Text>
                        <Text style={styles.centerSubText}>
                          {donut.title === "Analyse du Stock"
                            ? "Total des articles"
                            : "Total"}
                        </Text>
                      </View>
                    </LinearGradient>
                  </View>
                  <View style={styles.detailsCard}>
                    <Text style={styles.detailsTitle}>
                      {donut.detailsTitle}
                    </Text>
                    {donut.data.map((item, i) => {
                      const percent = total
                        ? ((item.value / total) * 100).toFixed(1)
                        : 0;
                      return (
                        <View key={item.label} style={styles.detailRow}>
                          <View
                            style={[
                              styles.detailColor,
                              {
                                backgroundColor: item.color,
                                borderColor: item.color,
                              },
                            ]}
                          />
                          <Text style={styles.detailLabel}>{item.label}</Text>
                          <View style={styles.detailValueBox}>
                            <Text
                              style={[
                                styles.detailValue,
                                { color: item.color },
                              ]}
                            >
                              {item.value}
                            </Text>
                            <Text style={styles.percentText}>({percent}%)</Text>
                          </View>
                        </View>
                      );
                    })}
                  </View>
                </ScrollView>
              );
            })}
          </ScrollView>
          <View style={styles.pagination}>
            {donutData.map((_, idx) => (
              <View
                key={idx}
                style={[styles.dot, donutIndex === idx && styles.activeDot]}
              />
            ))}
          </View>
          <Text style={styles.footerText}>
            Dernière mise à jour : aujourd'hui
          </Text>
        </View>
      </SafeAreaView>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  gradientBg: {
    flex: 1,
  },
  safeArea: {
    flex: 1,
    backgroundColor: "transparent",
  },
  container: {
    flex: 1,
    alignItems: "center",
    backgroundColor: "transparent",
    paddingTop: 4,
  },
  backButton: {
    position: "absolute",
    top: Platform.select({ ios: 20, android: 10 }),
    left: 8,
    zIndex: 10,
    backgroundColor: "#fff",
    borderRadius: 18,
    padding: 2,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOpacity: 0.08,
        shadowRadius: 3,
        shadowOffset: { width: 0, height: 1 },
      },
      android: { elevation: 2 },
    }),
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: theme.spacing.medium,
    color: theme.colors.primary,
    letterSpacing: 0.5,
    marginTop: theme.spacing.medium,
    textAlign: "center",
  },
  refreshButton: {
    flexDirection: "row",
    alignItems: "center",
    alignSelf: "center",
    marginBottom: theme.spacing.small,
    backgroundColor: "#f0f4fa",
    borderRadius: theme.borderRadius.medium,
    paddingVertical: 6,
    paddingHorizontal: 14,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOpacity: 0.06,
        shadowRadius: 2,
        shadowOffset: { width: 0, height: 1 },
      },
      android: { elevation: 1 },
    }),
  },
  refreshText: {
    color: theme.colors.primary,
    fontWeight: "bold",
    marginLeft: 8,
    fontSize: theme.fontSizes.regular,
  },
  chartWrapper: {
    alignItems: "center",
    justifyContent: "center",
    marginBottom: theme.spacing.medium,
    width: "100%",
    minHeight: CHART_SIZE + 16,
  },
  chartContainer: {
    alignItems: "center",
    justifyContent: "center",
    borderRadius: (CHART_SIZE + STROKE_WIDTH) / 2,
    elevation: 4,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.08,
    shadowRadius: 6,
    zIndex: 1,
    borderWidth: 1,
    borderColor: "#f0f0f0",
    width: CHART_SIZE,
    height: CHART_SIZE,
    backgroundColor: "#fff",
  },
  centerTextContainer: {
    position: "absolute",
    top: "41%",
    left: 0,
    right: 0,
    alignItems: "center",
    justifyContent: "center",
  },
  centerText: {
    fontSize: 26,
    fontWeight: "bold",
    color: theme.colors.primary,
    letterSpacing: 0.5,
  },
  centerSubText: {
    fontSize: theme.fontSizes.small + 2,
    color: "#888",
    marginTop: 1,
    fontWeight: "600",
    letterSpacing: 0.2,
  },
  detailsCard: {
    marginTop: theme.spacing.medium,
    width: "98%",
    maxWidth: 420,
    backgroundColor: "#fff",
    borderRadius: theme.borderRadius.medium,
    padding: theme.spacing.medium,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOpacity: 0.06,
        shadowRadius: 4,
        shadowOffset: { width: 0, height: 2 },
      },
      android: { elevation: 2 },
    }),
    marginBottom: theme.spacing.medium,
  },
  detailsTitle: {
    fontSize: theme.fontSizes.regular + 2,
    fontWeight: "bold",
    color: theme.colors.primary,
    marginBottom: theme.spacing.small,
    letterSpacing: 0.3,
  },
  detailRow: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
    marginBottom: 1,
  },
  detailColor: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 10,
    borderWidth: 2,
  },
  detailLabel: {
    flex: 1,
    fontSize: theme.fontSizes.regular,
    color: theme.colors.text,
    fontWeight: "600",
    letterSpacing: 0.1,
  },
  detailValueBox: {
    flexDirection: "row",
    alignItems: "center",
    minWidth: 60,
    justifyContent: "flex-end",
  },
  detailValue: {
    fontSize: theme.fontSizes.regular + 1,
    fontWeight: "bold",
    marginRight: 4,
  },
  percentText: {
    color: "#888",
    fontWeight: "500",
    fontSize: theme.fontSizes.regular,
  },
  pagination: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 4,
    marginTop: -8,
  },
  dot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: "#e0e0e0",
    marginHorizontal: 4,
  },
  activeDot: {
    backgroundColor: theme.colors.primary,
    width: 18,
    height: 10,
    borderRadius: 5,
  },
  footerText: {
    marginTop: theme.spacing.medium,
    color: "#bbb",
    fontSize: theme.fontSizes.small,
    fontStyle: "italic",
    textAlign: "center",
    letterSpacing: 0.1,
  },
});

export default AnalyticsScreen;
*/}