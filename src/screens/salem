import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Animated,
  Platform,
  useWindowDimensions,
  ActivityIndicator,
  Alert,
  TextInput,
  Modal,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import { SafeAreaView } from "react-native-safe-area-context";
import { theme } from "../constants/theme";
import { RootStackParamList } from "../types";
import { productColors } from "../constants/colors";
import { getInventory, InventoryItem } from "../services/api";
import { CONSTANTS } from "../constants";

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

const user = {
  email: "demo@stoky.com",
  role: "administrateur",
};

export default function HomeScreen() {
  const navigation = useNavigation<NavigationProp>();
  const [menuVisible, setMenuVisible] = useState(false);
  const menuAnim = useState(new Animated.Value(0))[0];
  const [loading, setLoading] = useState(true);
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);
  const [itemDetailVisible, setItemDetailVisible] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");

  // Column sorting
  const [sortBy, setSortBy] = useState<keyof InventoryItem | null>(null);
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc");

  const { width } = useWindowDimensions();

  // Fetch inventory on load
  useEffect(() => {
    fetchInventory();
  }, []);

  const fetchInventory = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await getInventory();
      if (response.data.success) {
        setInventory(response.data.data || []);
      } else {
        setError(response.data.message || "Failed to fetch inventory");
      }
    } catch (error: any) {
      console.error("Error fetching inventory:", error);
      setError(error.message || "An error occurred while fetching inventory");
    } finally {
      setLoading(false);
    }
  };

  // Filter inventory based on search query
  const filteredInventory = inventory.filter((item) => {
    const query = searchQuery.toLowerCase();
    return (
      item.productName.toLowerCase().includes(query) ||
      item.category.toLowerCase().includes(query) ||
      item.subCategory.toLowerCase().includes(query) ||
      item.color.toLowerCase().includes(query) ||
      item.size.toLowerCase().includes(query)
    );
  });

  // Sort inventory
  const sortedInventory = [...filteredInventory].sort((a, b) => {
    if (!sortBy) return 0;

    const valueA = a[sortBy];
    const valueB = b[sortBy];

    if (typeof valueA === "string" && typeof valueB === "string") {
      return sortOrder === "asc"
        ? valueA.localeCompare(valueB)
        : valueB.localeCompare(valueA);
    }

    // For numeric values
    if (valueA < valueB) return sortOrder === "asc" ? -1 : 1;
    if (valueA > valueB) return sortOrder === "asc" ? 1 : -1;
    return 0;
  });

  const handleSort = (column: keyof InventoryItem) => {
    if (sortBy === column) {
      // Toggle sort order if same column clicked
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      // New column, default to ascending
      setSortBy(column);
      setSortOrder("asc");
    }
  };

  const toggleMenu = () => {
    setMenuVisible((prev) => !prev);
    Animated.timing(menuAnim, {
      toValue: menuVisible ? 0 : 1,
      duration: 300,
      useNativeDriver: true,
    }).start();
  };

  const menuTranslateY = menuAnim.interpolate({
    inputRange: [0, 1],
    outputRange: [200, 0],
  });

  const navigateTo = (screen: keyof RootStackParamList) => {
    navigation.navigate(screen);
  };

  const handleItemPress = (item: InventoryItem) => {
    setSelectedItem(item);
    setItemDetailVisible(true);
  };

  const getStatusColor = (quantity: number) => {
    if (quantity <= 0) return theme.colors.error;
    if (quantity <= 5) return "#FFA500"; // Orange for low stock
    return theme.colors.success;
  };

  const renderInventoryItem = ({ item }: { item: InventoryItem }) => {
    const colorObj = productColors.find(
      (c) => c.name.toLowerCase() === item.color.toLowerCase()
    );

    return (
      <TouchableOpacity
        style={styles.stockItem}
        onPress={() => handleItemPress(item)}
        activeOpacity={0.7}
      >
        <View style={styles.stockInfo}>
          <Text style={styles.productName}>{item.productName}</Text>
          <View style={styles.stockDetails}>
            <View style={styles.stockProperty}>
              <Text style={styles.propertyLabel}>Catégorie:</Text>
              <Text style={styles.propertyValue}>{item.category}</Text>
            </View>
            <View style={styles.stockProperty}>
              <Text style={styles.propertyLabel}>Sous-cat:</Text>
              <Text style={styles.propertyValue}>{item.subCategory}</Text>
            </View>
          </View>
          <View style={styles.stockDetails}>
            <View style={styles.stockProperty}>
              <Text style={styles.propertyLabel}>Couleur:</Text>
              <View
                style={[
                  styles.colorCircle,
                  { backgroundColor: colorObj?.value || "#ccc" },
                ]}
              />
            </View>
            <View style={styles.stockProperty}>
              <Text style={styles.propertyLabel}>Taille:</Text>
              <Text style={styles.propertyValue}>{item.size}</Text>
            </View>
            <View style={styles.stockProperty}>
              <Text style={styles.propertyLabel}>Prix:</Text>
              <Text style={styles.propertyValue}>{item.price}€</Text>
            </View>
          </View>
        </View>

        <View style={styles.quantityContainer}>
          <Text style={styles.quantityLabel}>Quantité</Text>
          <Text
            style={[styles.quantity, { color: getStatusColor(item.quantity) }]}
          >
            {item.quantity}
          </Text>
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Ionicons
          name="home-outline"
          size={Math.max(24, width * 0.06)}
          color={theme.colors.primary}
        />
        <View>
          <Text style={styles.title}>Bienvenue, {user.email}</Text>
          <Text style={styles.subtitle}>Rôle : {user.role}</Text>
        </View>
      </View>

      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Rechercher un produit..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          placeholderTextColor={theme.colors.textSecondary}
        />
        <TouchableOpacity style={styles.refreshButton} onPress={fetchInventory}>
          <Ionicons name="refresh" size={22} color={theme.colors.primary} />
        </TouchableOpacity>
      </View>

      <View style={styles.listHeaderContainer}>
        <Text style={styles.listHeaderTitle}>Inventaire des produits</Text>
        <View style={styles.sortContainer}>
          <Text style={styles.sortLabel}>Trier par:</Text>
          <TouchableOpacity
            style={styles.sortDropdown}
            onPress={() => handleSort("productName")}
          >
            <Text style={styles.sortText}>
              {sortBy === "productName" ? "Nom " : "Nom"}
              {sortBy === "productName" && (sortOrder === "asc" ? "↑" : "↓")}
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      {loading ? (
        <View style={styles.centered}>
          <ActivityIndicator size="large" color={theme.colors.primary} />
          <Text style={styles.loadingText}>Chargement de l'inventaire...</Text>
        </View>
      ) : error ? (
        <View style={styles.centered}>
          <Ionicons
            name="alert-circle-outline"
            size={48}
            color={theme.colors.error}
          />
          <Text style={styles.errorText}>Erreur: {error}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={fetchInventory}>
            <Text style={styles.retryButtonText}>Réessayer</Text>
          </TouchableOpacity>
        </View>
      ) : sortedInventory.length === 0 ? (
        <View style={styles.centered}>
          <Ionicons
            name="cube-outline"
            size={48}
            color={theme.colors.textSecondary}
          />
          <Text style={styles.emptyText}>Aucun produit trouvé</Text>
          {searchQuery ? (
            <TouchableOpacity onPress={() => setSearchQuery("")}>
              <Text style={styles.clearSearchText}>Effacer la recherche</Text>
            </TouchableOpacity>
          ) : (
            <Text style={styles.emptySubText}>
              Ajoutez des produits pour les voir listés ici
            </Text>
          )}
        </View>
      ) : (
        <FlatList
          data={sortedInventory}
          renderItem={renderInventoryItem}
          keyExtractor={(item, index) =>
            `${item.productId}-${item.color}-${item.size}-${index}`
          }
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      )}

      {/* Floating menu button */}
      <TouchableOpacity style={styles.menuButton} onPress={toggleMenu}>
        <Ionicons name="menu" size={32} color={theme.colors.white} />
      </TouchableOpacity>

      {/* Animated floating menu */}
      {menuVisible && (
        <Animated.View
          style={[
            styles.menuContainer,
            {
              transform: [{ translateY: menuTranslateY }],
              width: width > 400 ? 320 : width * 0.85,
            },
          ]}
        >
          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("AddProduct");
            }}
          >
            <Ionicons
              name="add-circle-outline"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Ajouter un produit</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("BarcodeScanner");
            }}
          >
            <Ionicons
              name="barcode-outline"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Scanner un code-barres</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("DeleteArticle");
            }}
          >
            <Ionicons
              name="trash-outline"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Supprimer un article</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("AnalyticsScreen");
            }}
          >
            <Ionicons name="analytics" size={24} color={theme.colors.primary} />
            <Text style={styles.menuText}>Voir les analyses de stock</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("FianancialAnalytics");
            }}
          >
            <Ionicons
              name="stats-chart"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Analyse financière</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("AddCategory");
            }}
          >
            <Ionicons
              name="folder-open-outline"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Ajouter une catégorie</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              toggleMenu();
              navigateTo("StockScreen");
            }}
          >
            <Ionicons
              name="cube-outline"
              size={24}
              color={theme.colors.primary}
            />
            <Text style={styles.menuText}>Gestion du stock</Text>
          </TouchableOpacity>
        </Animated.View>
      )}

      {/* Item Detail Modal */}
      <Modal
        visible={itemDetailVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setItemDetailVisible(false)}
      >
        <View style={styles.modalOverlay}>
          {selectedItem && (
            <View style={styles.modalContent}>
              <View style={styles.modalHeader}>
                <Text style={styles.modalTitle}>
                  {selectedItem.productName}
                </Text>
                <TouchableOpacity
                  style={styles.closeIconContainer}
                  onPress={() => setItemDetailVisible(false)}
                >
                  <Ionicons name="close" size={24} color={theme.colors.text} />
                </TouchableOpacity>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Catégorie:</Text>
                <Text style={styles.detailValue}>{selectedItem.category}</Text>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Sous-catégorie:</Text>
                <Text style={styles.detailValue}>
                  {selectedItem.subCategory}
                </Text>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Couleur:</Text>
                <View style={styles.colorDetailContainer}>
                  <Text style={styles.detailValue}>{selectedItem.color}</Text>
                  <View
                    style={[
                      styles.colorDetailCircle,
                      {
                        backgroundColor:
                          productColors.find(
                            (c) =>
                              c.name.toLowerCase() ===
                              selectedItem.color.toLowerCase()
                          )?.value || "#ccc",
                      },
                    ]}
                  />
                </View>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Taille:</Text>
                <Text style={styles.detailValue}>{selectedItem.size}</Text>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Quantité:</Text>
                <Text
                  style={[
                    styles.detailValue,
                    { color: getStatusColor(selectedItem.quantity) },
                  ]}
                >
                  {selectedItem.quantity}
                </Text>
              </View>

              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Prix:</Text>
                <Text style={styles.detailValue}>{selectedItem.price}€</Text>
              </View>

              <View style={styles.modalActions}>
                <TouchableOpacity
                  style={[styles.modalButton, styles.editButton]}
                  onPress={() => {
                    setItemDetailVisible(false);
                    navigateTo("UpdateStockScreen");
                  }}
                >
                  <Ionicons
                    name="create-outline"
                    size={18}
                    color={theme.colors.white}
                  />
                  <Text style={styles.buttonText}>Modifier</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[styles.modalButton, styles.stockButton]}
                  onPress={() => {
                    setItemDetailVisible(false);
                    navigateTo("StockScreen");
                  }}
                >
                  <Ionicons
                    name="refresh-outline"
                    size={18}
                    color={theme.colors.white}
                  />
                  <Text style={styles.buttonText}>Gérer Stock</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    padding: 16,
    backgroundColor: theme.colors.white,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  title: {
    fontSize: 18,
    fontWeight: "bold",
    color: theme.colors.text,
    marginLeft: 12,
  },
  subtitle: {
    fontSize: 14,
    color: theme.colors.textSecondary,
    marginLeft: 12,
  },
  searchContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginHorizontal: 16,
    marginVertical: 12,
  },
  searchInput: {
    flex: 1,
    backgroundColor: theme.colors.white,
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 12,
    fontSize: 16,
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
      },
      android: {
        elevation: 1,
      },
    }),
  },
  refreshButton: {
    padding: 10,
    marginLeft: 8,
  },
  listHeaderContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 16,
    marginBottom: 8,
  },
  listHeaderTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: theme.colors.text,
  },
  sortContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  sortLabel: {
    fontSize: 14,
    color: theme.colors.textSecondary,
    marginRight: 4,
  },
  sortDropdown: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: theme.colors.lightGrey,
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  sortText: {
    fontSize: 14,
    color: theme.colors.primary,
    fontWeight: "500",
  },
  centered: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingTop: 40,
  },
  loadingText: {
    marginTop: 12,
    color: theme.colors.textSecondary,
    fontSize: 16,
  },
  errorText: {
    marginTop: 12,
    color: theme.colors.error,
    textAlign: "center",
    fontSize: 16,
    paddingHorizontal: 24,
  },
  retryButton: {
    marginTop: 16,
    paddingVertical: 8,
    paddingHorizontal: 16,
    backgroundColor: theme.colors.primary,
    borderRadius: 8,
  },
  retryButtonText: {
    color: theme.colors.white,
    fontWeight: "bold",
  },
  emptyText: {
    marginTop: 16,
    fontSize: 18,
    fontWeight: "bold",
    color: theme.colors.text,
  },
  emptySubText: {
    marginTop: 8,
    fontSize: 14,
    color: theme.colors.textSecondary,
    textAlign: "center",
    paddingHorizontal: 24,
  },
  clearSearchText: {
    marginTop: 8,
    color: theme.colors.primary,
    fontWeight: "500",
  },
  listContainer: {
    paddingHorizontal: 16,
    paddingBottom: 80,
  },
  stockItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginVertical: 6,
    padding: 12,
    borderRadius: 10,
    backgroundColor: theme.colors.white,
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  stockInfo: {
    flex: 1,
  },
  productName: {
    fontSize: 16,
    fontWeight: "bold",
    color: theme.colors.text,
    marginBottom: 4,
  },
  stockDetails: {
    flexDirection: "row",
    alignItems: "center",
    flexWrap: "wrap",
    marginTop: 4,
  },
  stockProperty: {
    flexDirection: "row",
    alignItems: "center",
    marginRight: 12,
    marginBottom: 4,
  },
  propertyLabel: {
    fontSize: 12,
    color: theme.colors.textSecondary,
    marginRight: 4,
  },
  propertyValue: {
    fontSize: 12,
    color: theme.colors.text,
    fontWeight: "500",
  },
  colorCircle: {
    width: 16,
    height: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  quantityContainer: {
    alignItems: "center",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
    backgroundColor: theme.colors.lightGrey,
  },
  quantityLabel: {
    fontSize: 10,
    color: theme.colors.textSecondary,
    marginBottom: 2,
  },
  quantity: {
    fontSize: 18,
    fontWeight: "bold",
  },
  menuButton: {
    position: "absolute",
    right: 16,
    bottom: 16,
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: theme.colors.primary,
    alignItems: "center",
    justifyContent: "center",
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 4,
      },
      android: {
        elevation: 4,
      },
    }),
  },
  menuContainer: {
    position: "absolute",
    bottom: 80,
    right: 16,
    backgroundColor: theme.colors.white,
    borderRadius: 16,
    padding: 8,
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 8,
      },
      android: {
        elevation: 8,
      },
    }),
  },
  menuItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  menuText: {
    marginLeft: 16,
    fontSize: 16,
    color: theme.colors.text,
  },
  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    padding: 16,
  },
  modalContent: {
    backgroundColor: theme.colors.white,
    borderRadius: 16,
    padding: 24,
    width: "100%",
    maxWidth: 400,
    ...Platform.select({
      ios: {
        shadowColor: theme.colors.shadow,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
      },
      android: {
        elevation: 8,
      },
    }),
  },
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 16,
    position: "relative",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: theme.colors.primary,
    textAlign: "center",
  },
  closeIconContainer: {
    position: "absolute",
    right: 0,
    top: 0,
    padding: 4,
  },
  detailRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  detailLabel: {
    fontSize: 16,
    color: theme.colors.textSecondary,
  },
  detailValue: {
    fontSize: 16,
    fontWeight: "500",
    color: theme.colors.text,
  },
  colorDetailContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  colorDetailCircle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: theme.colors.border,
    marginLeft: 8,
  },
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 24,
  },
  modalButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    flex: 1,
    marginHorizontal: 8,
  },
  editButton: {
    backgroundColor: theme.colors.primary,
  },
  stockButton: {
    backgroundColor: theme.colors.success,
  },
  buttonText: {
    color: theme.colors.white,
    fontWeight: "bold",
    fontSize: 16,
    marginLeft: 8,
  },
});
